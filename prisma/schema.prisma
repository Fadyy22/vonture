// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  TOURIST
  HOST
  ADMIN
}

enum Status {
  PENDING
  ACCEPTED
  REJECTED
}

enum Gender {
  MALE
  FEMALE
}

model User {
  id                  Int                    @id @default(autoincrement())
  name                String
  email               String                 @unique
  password            String
  phone_number        String
  nationality         String
  bio                 String
  gender              Gender
  birthdate           DateTime
  role                Role
  rating              Float                  @default(0)
  skills              Skill[]
  hostOpportunities   Opportunity[]
  place               Place[]
  payment             Payment[]
  receivedReviews     Host_Tourist_Review[]  @relation("receivedReviews")
  givenReviews        Host_Tourist_Review[]  @relation("givenReviews")
  touristPlaceReviews Tourist_Place_Review[]
  touristPlans        Tourist_Plan[]
  toursitApplications Tourist_Application[]
  createdAt           DateTime               @default(now())
  updatedAt           DateTime               @updatedAt
}

model Place {
  id             Int                    @id @default(autoincrement())
  host           User                   @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId         Int
  name           String
  pin            String
  city           String
  country        String
  phone_number   String
  rating         Float                  @default(0)
  type           String
  placeMedia     Place_Media[]
  opportunities  Opportunity[]
  touristReviews Tourist_Place_Review[]
  createdAt      DateTime               @default(now())
  updatedAt      DateTime               @updatedAt
}

model Place_Media {
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   Int
  media     String
  createdAt DateTime @default(now())

  @@id([placeId, media])
}

model Opportunity {
  id              Int                   @id @default(autoincrement())
  host            User                  @relation(fields: [hostId], references: [id], onDelete: Cascade)
  hostId          Int
  place           Place                 @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId         Int
  title           String
  description     String
  from            DateTime
  to              DateTime
  offers          Offer[]
  requirements    Requirement[]
  appliedTourists Tourist_Application[]
  createdAt       DateTime              @default(now())
  updatedAt       DateTime              @updatedAt
}

model Plan {
  id       Int            @id @default(autoincrement())
  name     String
  duration String
  price    Int
  tourists Tourist_Plan[]
}

model Payment {
  id        Int      @id @default(autoincrement())
  tourist   User     @relation(fields: [touristId], references: [id], onDelete: Cascade)
  touristId Int
  amount    Int
  createdAt DateTime @default(now())
}

model Offer {
  id            Int           @id @default(autoincrement())
  name          String
  opportunities Opportunity[]
}

model Requirement {
  id            Int           @id @default(autoincrement())
  name          String
  opportunities Opportunity[]
}

model Skill {
  id       Int    @id @default(autoincrement())
  name     String
  tourists User[]
}

model Host_Tourist_Review {
  receivedBy   User     @relation("receivedReviews", fields: [receivedById], references: [id], onDelete: Cascade)
  receivedById Int
  givenBy      User     @relation("givenReviews", fields: [givenById], references: [id], onDelete: Cascade)
  givenById    Int
  rating       Float
  comment      String
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@id([receivedById, givenById])
}

model Tourist_Place_Review {
  tourist   User     @relation(fields: [touristId], references: [id], onDelete: Cascade)
  touristId Int
  place     Place    @relation(fields: [placeId], references: [id], onDelete: Cascade)
  placeId   Int
  rating    Float
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@id([touristId, placeId])
}

model Tourist_Plan {
  tourist   User     @relation(fields: [touristId], references: [id], onDelete: Cascade)
  touristId Int
  plan      Plan     @relation(fields: [planId], references: [id])
  planId    Int
  createdAt DateTime @default(now())

  @@id([touristId, planId])
}

model Tourist_Application {
  tourist       User        @relation(fields: [touristId], references: [id], onDelete: Cascade)
  touristId     Int
  opportunity   Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  opportunityId Int
  status        Status      @default(PENDING)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt

  @@id([touristId, opportunityId])
}
